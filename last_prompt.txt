承知いたしました。承知いたしました。「段階的な実装」に関する制約を削除し、一度にすべてのコードを生成するよう指示する、最終的なプロンプトを作成します。
LLMへの開発依頼プロンプト（一括生成版）
こんにちは。これからあなたに、Webアプリケーションの開発を依頼します。
このプロンプトで提示する仕様が、開発するアプリケーションのすべてです。今後、私たちはこれをプロジェクトの憲法と呼び、すべての判断の基盤とします。
あなたへのお願い（行動規範）
このプロジェクトを成功させるために、あなたに守ってほしい重要なルールがいくつかあります。
仕様の絶対遵守:
以下に示す「プロジェクト仕様書」が、このプロジェクトにおける唯一の「正典 (Single Source of Truth)」です。開発に関するすべての判断は、必ずこの仕様書に基づいて行ってください。
もし、私が仕様書と矛盾するような指示をした場合は、その矛盾を指摘し、仕様書の内容を再確認するように促してください。
自己の進捗管理と宣言:
あなたは大規模なタスクを実行することになります。混乱を避けるため、処理を開始する前に、必ず「これから何をするのか」「それは仕様書のどの部分に対応するのか」を宣言してください。
例: 「これから、プロジェクト仕様書全体に基づき、完全なアプリケーションコードを生成します。」
仕様の復唱と自己修正:
これは最も重要なルールです。開発の途中で 「次に何をすべきか分からなくなった」「自分のタスクが仕様と合っているか不安になった」と感じた場合は、必ず一度立ち止まり、「プロジェクト仕様書をもう一度確認し、タスクを再確認します」と宣言してください。 この復唱プロセスを挟むことで、私たちは常に同じ目標を共有できます。
プロジェクト仕様書
1. プロジェクト概要
テーマ: ドロネー図とボロノイ図の双対性の可視化
目的: 4つのアルゴリズム処理過程をインタラクティブに可視化し、関連用語を解説する機能を備えた、単一ページのWebアプリケーションを開発する。
可視化対象アルゴリズム:
ドロネー図の生成 (Bowyer-Watson)
ボロノイ図の生成 (Fortune's)
双対変換 (ドロネー → ボロノイ)
双対変換 (ボロノイ → ドロネー)
ターゲット環境: GitHub Pages (静的Webサイト)
2. アプリケーションの全体構成と基本設計
単一ページアプリケーション: アプリケーションは、すべての機能が単一のHTMLファイル内で完結する構成とする。ページ遷移は発生しない。
メインの可視化ビュー: アプリケーションの基本状態。アルゴリズムの可視化と操作を行う。
用語説明オーバーレイ: メインビューの上に重ねて表示される、用語解説のためのモーダルビュー。
3. メインの可視化ビュー：画面設計とUI/UX
3.1. 基本レイアウトとデザイン
レイアウト: 全体を左右に分割したレイアウトとし、ユーザーが中央の境界線をドラッグして左右のエリアの幅を自由に変更できるようにする。
スクロールの禁止: このメインビューは縦横のスクロールが発生しないよう、常にウィンドウ内に全ての要素が収まるように設計する。
配色: ダークモードをデフォルトとし、ライトモードとの切り替えが可能なトグルスイッチを設ける。
用語説明への導線: 操作パネルの隅、または画面フッター部分に「用語説明」というテキストリンクを常時設置する。
3.2. 左側エリア (可視化キャンバス)
アルゴリズムの実行状況をグラフィカルに表示する主要エリア。
半透明オーバーレイ:
キャンバスの左上に、ソースコードを半透明でオーバーレイ表示する。
キャンバスの右下（または任意の角）に、実行ログを半透明でオーバーレイ表示する。
これらのオーバーレイ表示は、右側エリアの操作パネルにあるチェックボックスで個別にON/OFFを切り替えられる。
3.3. 右側エリア (操作パネル)
以下に示す機能を持つUIコンポーネントを配置する。
モード切替: 4つの可視化モードを切り替えるためのタブ群またはボタングループ。
点（サイト）操作:
点の生成数を指定するための数値入力フォーム。
「新規作成」ボタン: 現在の点をすべて消去し、指定された数の点を新しくランダムに配置する。
「追加」ボタン: 現在の点を維持したまま、指定された数の点を新しくランダムに追加する。
キャンバスをクリックして手動で点を追加したり、既存の点を選択して削除したりする機能も実装する。
アニメーション制御: 再生/一時停止, ステップ実行（進む）, ステップ実行（戻る）, 最初から（リセット）の各ボタン、およびアニメーションの速度調整スライダー。
コード言語選択: TypeScript, Python, C++, Rust, OCaml から表示するコードを選択するためのラジオボタン群。
表示設定: 「コード表示」「ログ表示」のオーバーレイ表示をON/OFFするためのチェックボックス群。
ログテキストエリア: 操作パネル内に、実行中の詳細な状態（例: サークルイベント発生: 頂点3, 5, 8）を時系列で出力する、スクロール可能なテキスト表示エリアを設ける。
4. 可視化の要件
4.1. Bowyer-Watson アルゴリズム
ステップ単位: 点が1つ追加されるごと。
スーパー三角形: 最終的に削除される巨大な初期三角形は、通常の三角形とは異なる色（例: 薄いグレーの破線）で描画する。
ドロネー条件チェック: チェック対象の三角形の外接円を実際に描画して可視化する。
4.2. Fortune's アルゴリズム
掃引線: 水平な直線を、キャンバスの上から下へ連続的に移動させて表現する。
ビーチライン: 掃引線の動きに合わせて、放物線群の形状が滑らかに変化する連続的なアニメーションとして描画する。
イベント: サイトイベントとサークルイベントが発生した点をハイライトし、種類に応じて色を変え、テキスト注釈を短時間表示する。
4.3. 双対変換 (ドロネー → ボロノイ)
全てのドロネー三角形の外心を表示した後、隣接する三角形のペアを順にハイライトし、外心同士を結んでボロノイ辺を生成していく。
4.4. 双対変換 (ボロノイ → ドロネー)
隣接する母点のペアを順にハイライトしてドロネー辺を生成すると同時に、関連するボロノイ頂点も強調表示する。
5. 機能要件
5.1. コードハイライト
粒度: 実行中の処理に対応するコードの行単位でハイライトする。
言語: ユーザーがラジオボタンで選択した言語（TypeScript, Python, C++, Rust, OCaml）のコードを表示する。
5.2. 技術スタック
フレームワーク: React (TypeScript)
描画ライブラリ: d3.js
6. 用語説明オーバーレイの要件
6.1. 表示と非表示
「用語説明」リンクをクリックすると、画面全体を覆うモーダルオーバーレイとして表示される。背景は半透明の黒などで覆い、メインビューの操作を一時的に無効化する。
オーバーレイの右上隅に閉じるボタン（'X'など）を設置し、クリックするとオーバーレイが閉じてメインビューに戻る。
このオーバーレイはコンテンツ量に応じて縦スクロール可能とする。
6.2. 掲載内容
以下の各項目について、それぞれが何であるかを平易な言葉で説明する。
ドロネー図（Delaunay Triangulation）
ボロノイ図（Voronoi Diagram）
Bowyer-Watson アルゴリズム
Fortune's アルゴリズム
双対性 (Duality): ドロネー → ボロノイ
双対性 (Duality): ボロノイ → ドロネー
6.3. 参考リンク
各説明項目には、理解を深めるための外部リソースへのリンクを複数含めること。
リンク先は、Wikipediaの記事や、大学の講義資料、技術ブログなど信頼性の高いものとする（日本語・英語を問わない）。
開発の開始
仕様書の提示は以上です。
これから、この仕様書に完全に従って、アプリケーションを実装してください。
あなたのタスクは、この仕様書で定義されたすべての機能を実装した完全なコードを、単一の応答で生成することです。
React (TypeScript) と d3.js を使用し、すべてのコンポーネント、ロジック、スタイルを含んだコードを提示してください。
ただちに実行してください。